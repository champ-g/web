---------floyd
package algorithms;
import java.util.Scanner;
public class Floyd 
{	
	private int dmat[][],n;
	public static final int max = 999;
	Floyd(int n) 
	{
		dmat = new int[n + 1][n + 1];
		this.n = n;
		for (int i = 1; i <= n; i++)
			for (int j = 1; j <= n; j++)
				dmat[i][j] = max;
	}
	public void floyd_compute(int adjmat[][]) 
	{
		System.arraycopy(adjmat, 1, dmat, 1, n);
		for (int k = 1; k <= n; k++) 
		{
			for (int i = 1; i <= n; i++) 
			{
				for (int j = 1; j <= n; j++) 
				{
					if (dmat[i][k] + dmat[k][j] < dmat[i][j]) 
					{
						dmat[i][j] = dmat[i][k] + dmat[k][j];
					}
				}
			}
		}
		for (int i = 1; i <= n; i++)
			System.out.print("\t" + i);
			System.out.println();
			for (int i = 1; i <= n; i++) 
			{
				System.out.print(i + "\t");
				for (int j = 1; j <= n; j++) 
					System.out.print(dmat[i][j] + "\t");               
				System.out.println();
			}
	}
	public static void main(String[] arg) 
	{
		int adjmat[][];
		int n;
		Scanner in = new Scanner(System.in);
		System.out.println("Enter the number of vertices");
		n = in.nextInt();
		adjmat = new int[n + 1][n + 1];
		System.out.println("Enter the Weighted Matrix for the graph");
			for (int i = 1; i <= n; i++) 
			{
				for (int j = 1; j <= n; j++) 
				{
					adjmat[i][j] = in.nextInt();
					if (i == j) 
					{
						adjmat[i][j] = 0;
						continue;
					}
					if (adjmat[i][j] == 0) 	
						adjmat[i][j] = max;
				}
			}
			System.out.println("The All Pairs Shortest Distance of the Graph is: ");
			Floyd obj = new Floyd(n);
			obj.floyd_compute(adjmat);
			in.close();
	}
}

--------------------------------TSP------


package algorithms;
import java.util.Scanner;
class TSP 
{
	static int cost = 0;
	public static void main(String[] args) 
	{
		int a[][]  = new int[10][10];
		int visited[] = new int[10];
		int n;
		System.out.println("Enter number of cities: ");
		Scanner s = new Scanner(System.in);
		n = s.nextInt();
		create(a, visited, n);
		System.out.println("\n\npath is");
		mincost(a, n, 0, visited);
		display();
	}

	public static void display() 
	{
		System.out.println("\n total cost of tour=" + cost);
	}

	public static void mincost(int a[][], int n, int city, int visited[] ) 
	{
		int city_no;
		visited[city] = 1;
		System.out.print((city + 1) + "--> ");
		city_no = least(a, visited, n, city);
		if (city_no == 999) 
		{
			city_no = 0;
			System.out.print(" " + (city_no + 1));
			cost += a[city][city_no];
			return;
		}
		mincost(a, n, city_no, visited);
	}

	public static int least(int[][] a, int[] visited, int n, int c)
	// returns the city which is reachable from source in minimum cost
	{
		int i, min_node = 999;
		int min = 999;
		int new_min = 0;
		for (i = 0; i < n; i++) 
		{
			if ((a[c][i] != 0) && visited[i] == 0)
				if (a[c][i] < min) 
				{
					min = a[i][0] + a[c][i];
					new_min = a[c][i];
					min_node = i;
				}
		}
		if (min != 999)
			cost += new_min;
		return min_node;
	}

	public static void create(int a[][], int visited[], int n) 
	{
		Scanner in = new Scanner(System.in);
		System.out.println("\nenter the cost matrix:");
		for (int i = 0; i < n; i++) 
		{
			for (int j = 0; j < n; j++) 
			{
				a[i][j] = in.nextInt();
			}
			visited[i] = 0;
		}
	}
}

--------------------Knapsack
package algorithms;
import java.util.Scanner;
public class Knapsack 
{
	static int n, m, p[], w[];
	public static void greedy()
	{
		float max, profit = 0;
		int k = 0, i;
		float ratio = 0;
		System.out.println("Item included: ");
		for (i = 0; i < n; i++) 
		{
			max = 0;
			for (int j = 0; j < n; j++)
			{
				ratio = (float) p[j] / w[j];
				// Finding the maximum ratio (decreasing order)
				if (ratio > max) 
				{
					k = j; // index of the weight with max ratio
					max = ratio;
				}
			}
			// Find if the weight fits in the Knapsack
			if (w[k] <= m) 
			{
				System.out.print(k + ", ");
				m -= w[k]; // Update the knapsack value
				profit += p[k]; // Update the Overall Profit
				p[k] = 0;
			}
			else // Weight cannot be fit into the Knapsack
				break;
		}
		System.out.println(k + " fit with portion: " + ((float) m / w[k]));
		profit += ((float) m) / w[k] * p[k]; // Update the Overall Profit with portioned profit.
		System.out.println("Knapsack profit: " + profit);
	}

	public static void main(String[] args) 
	{
		Scanner in = new Scanner(System.in);
		System.out.println("Enter the no. of items: ");
		n = in.nextInt();
		p = new int[n];
		w = new int[n];
		System.out.println("Enter the weights and corresponding profits of the items: ");
		for (int i = 0; i < n; i++) 
		{
			w[i] = in.nextInt();
			p[i] = in.nextInt();
		}
		System.out.println("Enter Knapsack Capacity: ");
		m = in.nextInt();
		greedy();
	}
}
-------------------------DP knapsack
package algorithms;
import java.util.Scanner;
class KnapsackDynamic 
{
	static int knap(int c, int w[], int p[], int n) 
	{
		int i, j;
		int k[][] = new int[n + 1][c + 1];
		for (i = 0; i <= n; i++)
		{
			for (j = 0; j <= c; j++) 
			{
				if (i == 0 || j == 0) 				
					k[i][j] = 0;
				
			    else if (w[i - 1] <= j) 
					k[i][j] = Math.max(p[i - 1] + k[i - 1][j - w[i - 1]], k[i - 1][j]);
				
				else 
					k[i][j] = k[i - 1][j];
			}
		}
		System.out.println("Knapsack Table: ");
		for (i = 0; i <= n; i++) 
			{for (j = 0; j <= c; j++) 
				System.out.print(k[i][j] + " ");
			System.out.println();
			}
		System.out.println("Items Considered: ");
		i = n;
		j = c;
		while (i > 0 && j > 0) 
		{
			if (k[i][j] != k[i - 1][j]) 
			{
				System.out.print(i + ", ");
				j -= w[i - 1];
			}
			i--;
		}
		return k[n][c];
	}

	public static void main(String[] args) 
	{
		Scanner in = new Scanner(System.in);
		System.out.println("Enter the number of objects: ");
		int n = in.nextInt();
		System.out.println("Enter the object weights: ");
		int[] w = new int[n];
		for (int i = 0; i < w.length; i++) 
			w[i] = in.nextInt();
	
		System.out.println("Enter objects profits: ");
		int[] p = new int[n];
		for (int i = 0; i < p.length; i++) 
			p[i] = in.nextInt();
		
		System.out.println("Enter the max Knapsack Capacity: ");
		int c = in.nextInt();
		System.out.println("Max value that can be placed into the Knapsack: " + knap(c, w, p, n));
		in.close();
	}
}
--------------------------hamiltonian----
package algorithms;
import java.util.Scanner;
public class Hamiltonian 
{
	static int MAX = 25;
	static int vertex[] = new int[MAX];

	public static void main(String[] args) 
	{
		int i, j, v1, v2, edges, n;
		int G[][] = new int[MAX][MAX];
		System.out.println("enter the number of vertices of graph");
		Scanner in = new Scanner(System.in);
		n = in.nextInt();
		for (i = 1; i <= n; i++) 
		{
			for (j = 1; j <= n; j++) 
			{
				G[i][j] = 0;
				vertex[i] = 0;
			}
		}
		System.out.println("\n enter the total number of edges:");
		edges = in.nextInt();
		for (i = 1; i <= edges; i++) 
		{
			System.out.println("enter the edge:");
			v1 = in.nextInt();
			v2 = in.nextInt();
			G[v1][v2] = 1;
			G[v2][v1] = 1;
		}
		vertex[1] = 1;
		System.out.println("Hamiltonian cycle");
		H_cycle(G, n, 2);
	}
	
	public static void H_cycle(int G[][], int n, int k) 
	{
		int i;
		while (true) 
		{
			next_vertex(G, n, k);
			if (vertex[k] == 0)
				return;
			if (k == n) 
			{
				System.out.println();
				for (i = 1; i <= n; i++)
					System.out.print(vertex[i] + "-->");
				System.out.println(" " + vertex[1]);
			} 
			else
				H_cycle(G, n, k + 1);
		}
	}

	public static void next_vertex(int G[][], int n, int k) 
	{
		int j;
		while (true) 
		{
			vertex[k] = (vertex[k] + 1) % (n + 1);
			if (vertex[k] == 0)
				return;
			if (G[vertex[k - 1]][vertex[k]] != 0) 
			{
				for (j = 1; j <= k - 1; j++) 
				{
					if (vertex[j] == vertex[k])
						break;
				}
				if (j == k) 
				{
					if ((k < n) || ((k == n) && (G[vertex[n]][vertex[1]] != 0)))
						return;
				}
			}
		}
	}	
}
------------------SUMOFSUBSETS
package algorithms;

import java.util.Scanner;

public class SumOfSubsets {
	int[] w, x;
	int sum;
	int total = 0;

	public void process() {
		getData();
		System.out.println("The subsets are:");
		subset(0, 1, total);
	}

	private void getData() {
		Scanner sc = new Scanner(System.in);
		System.out.print("Enter the number of elements:");
		int n = sc.nextInt();
		w = new int[n + 1];
		x = new int[n + 1];
		System.out.println("Enter " + n + " Elements :");
		for (int i = 1; i < n + 1; i++) {
			w[i] = sc.nextInt();
			total += w[i];
		}
		System.out.println("Enter the sum to be obtained: ");
		sum = sc.nextInt();
		if (total < sum) {
			System.out.println("No possible subsets!!!");
			System.exit(1);
		}
		sc.close();
	}

	private void subset(int s, int k, int r) {
		if (k == w.length) { // Check end of array
			if (s == sum) { // If the sum is equal and subset passed
				printSubset(k);
			}
			return;
		}
		if (s + w[k] <= sum) { // If the addition of the number is less than sum
			x[k] = 1; // number included
			subset(s + w[k], k + 1, r - w[k]); // recursive call for more paths
		}
		x[k] = 0; // the number not included
		subset(s, k + 1, r - w[k]); // recursive call for more paths
	}

	private void printSubset(int k) {
		System.out.print("(");
		for (int i = 0; i < k; i++) {
			if (x[i] == 1)
				System.out.print(" " + w[i]);
		}
		System.out.println(" )");
	}

	public static void main(String[] args) {
		new SumOfSubsets().process();
	}
}
